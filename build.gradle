apply plugin : 'c'

model {
	repositories {
		libs(PrebuiltLibraries) {
            if (System.getenv('MURL_DIR') != null) {
                libmurl {
                    headers.srcDir System.getenv('MURL_DIR') + "\\include"
                    binaries.withType(SharedLibraryBinary) {
                        sharedLibraryFile = file(System.getenv('MURL_DIR') + "\\bin\\libmurl.dll")
                        sharedLibraryLinkFile = file(System.getenv('MURL_DIR') + "\\lib\\libmurl.lib")
                    }
                }
            }
            if (System.getenv('CURL_DIR') != null) {
                libcurl {
                    headers.srcDir System.getenv('CURL_DIR') + "\\include"
                    binaries.withType(SharedLibraryBinary) {
                        sharedLibraryFile = file(System.getenv('CURL_DIR') + "\\bin\\libcurl.dll")
                        sharedLibraryLinkFile = file(System.getenv('CURL_DIR') + "\\lib\\libcurl.lib")
                    }
                }
            }
			libssl {
                headers.srcDir System.getenv('SSL_DIR') + '\\include'
                binaries.withType(SharedLibraryBinary) {
                    sharedLibraryFile = file(System.getenv('SSL_DIR') + "\\bin\\libssl32.dll")
                    sharedLibraryLinkFile = file(System.getenv('SSL_DIR') + "\\lib\\ssleay32.lib")
                }
			}
			if (System.getenv('FOM_DIR') != null) {
                libcrypto {
                    headers.srcDir System.getenv('FOM_DIR') + '\\include'
                    binaries.withType(SharedLibraryBinary) {
                        sharedLibraryFile = file(System.getenv('FOM_DIR') + "\\bin\\libeay32.dll")
                        sharedLibraryLinkFile = file(System.getenv('FOM_DIR') + "\\lib\\libeay32.lib")
                    }
                }
			} else {
                libcrypto {
                    headers.srcDir System.getenv('SSL_DIR') + '\\include'
                    binaries.withType(SharedLibraryBinary) {
                        sharedLibraryFile = file(System.getenv('SSL_DIR') + "\\bin\\libeay32.dll")
                        sharedLibraryLinkFile = file(System.getenv('SSL_DIR') + "\\lib\\libeay32.lib")
                    }
                }
			}
			if(!System.getenv('DISABLE_SAFEC').equals("TRUE")) {
				ciscosafec {
					headers.srcDir System.getenv('SAFEC_DIR') + "\\include"
					binaries.withType(SharedLibraryBinary) {
                        sharedLibraryFile = file(System.getenv('SAFEC_DIR') + "\\safeclib.dll")
                        sharedLibraryLinkFile = file(System.getenv('SAFEC_DIR') + "\\safeclib.lib")
					}
				}
			}
		}
	}
}

model {
	binaries {
		all {
			if (toolChain in Gcc) {
				cCompiler.args "-g", "-O0", "-Wall"
				linker.args "-lcurl"
			} else {
				cCompiler.define "WIN32"
                                cCompiler.define "__STDC_WANT_SECURE_LIB__=0"
                                cCompiler.args "/I${projectDir}\\include"
                                linker.args "advapi32.lib"
			}
		}
	}
}

model {
    platforms {
        x86 {
            architecture "x86"
        }
        x64 {
            architecture "x86_64"
        }
    }
	components {
		acvp(NativeLibrarySpec) {
			sources {
					c {
							source {
								if(System.getenv('DISABLE_SAFEC').equals("TRUE")) {
									srcDir "safe_c_stub/src"
								}
								srcDir "src"
								include "*.c"
							}
							exportedHeaders {
									srcDir "include/acvp"
									if(System.getenv('DISABLE_SAFEC').equals("TRUE")) {
										srcDir "safe_c_stub/include"
									}
									include "*.h"
							}
					}
			}
			binaries.all {
			    if (System.getenv('MURL_DIR') != null) {
                    lib library: 'libmurl', linkage: 'shared'
			    }
                if (System.getenv('CURL_DIR') != null) {
                    lib library: 'libcurl', linkage: 'shared'
                }
				lib library: 'libssl', linkage: 'shared'
				if(!System.getenv('DISABLE_SAFEC').equals("TRUE")) {
						lib library: "ciscosafec", linkage: "shared"
				}
			}
            if (System.getenv('PROCESSOR_ARCHITECTURE').equals("x86")) {
                // 32 bit
                targetPlatform "x86"
            } else {
                // Default to 64 bit
                targetPlatform "x64"
            }
		}
		example(NativeExecutableSpec) {
			sources {
				c {
					source {
						srcDir "app"
						exclude "poc.json"
						exclude "README"
						exclude "Makefile.am"
						exclude "Makefile.in"
					}
				}
			}
			binaries.all {
			    if (System.getenv('MURL_DIR') != null) {
                    lib library: 'libmurl', linkage: 'shared'
			    }
                if (System.getenv('CURL_DIR') != null) {
                    lib library: 'libcurl', linkage: 'shared'
                }

                lib library: 'libcrypto', linkage: 'shared'
				lib library: 'libssl', linkage: 'shared'
				lib library: 'acvp', linkage: 'static'

				if(!System.getenv('DISABLE_SAFEC').equals("TRUE")) {
						lib library: "ciscosafec", linkage: "shared"
				}
			}
            if (System.getenv('PROCESSOR_ARCHITECTURE').equals("x86")) {
                // 32 bit
                targetPlatform "x86"
            } else {
                // Default to 64 bit
                targetPlatform "x64"
            }
		}
	}
}
